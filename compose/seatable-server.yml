---
services:
  seatable-server:
    image: ${SEATABLE_IMAGE:-seatable/seatable-enterprise-testing:4.4.4}
    restart: unless-stopped
    container_name: seatable-server
    volumes:
      - "/opt/seatable-server:/shared"
      - type: bind
        source: "./seatable-license.txt"
        target: "/shared/seatable/seatable-license.txt"
        read_only: ${SEATABLE_LICENSE_FORCE_READ_ONLY:-false}
      # - "/opt/caddy/certs/cert.pem:/usr/local/share/ca-certificates/cert.crt" ### neccesary for self-signed certificates / .crt in PEM Format
    # command: /bin/bash -c "update-ca-certificates && exec /sbin/my_init -- /templates/enterpoint.sh" ### neccesary for self-signed certificates
    environment:
      - DB_HOST=mariadb
      - DB_ROOT_PASSWD=${SEATABLE_MYSQL_ROOT_PASSWORD:?Variable is not set or empty}
      - SEATABLE_SERVER_HOSTNAME=${SEATABLE_SERVER_HOSTNAME:?Variable is not set or empty}
      - SEATABLE_SERVER_PROTOCOL=${SEATABLE_SERVER_PROTOCOL:-https}
      - SEATABLE_ADMIN_EMAIL=${SEATABLE_ADMIN_EMAIL:?Variable is not set or empty}
      - SEATABLE_ADMIN_PASSWORD=${SEATABLE_ADMIN_PASSWORD:?Variable is not set or empty}
      - TIME_ZONE=${TIME_ZONE}
      - REQUESTS_CA_BUNDLE=/etc/ssl/certs/ca-certificates.crt
      # - PYTHON_SCHEDULER_AUTH_TOKEN=${PYTHON_SCHEDULER_AUTH_TOKEN}  ### not yet suppported
    labels:
      caddy: ${SEATABLE_SERVER_PROTOCOL:-https}://${SEATABLE_SERVER_HOSTNAME:?Variable is not set or empty}
      caddy.reverse_proxy: "{{upstreams 80}}"
      # caddy.tls.ca: https://acme-staging-v02.api.letsencrypt.org/directory ### Optional label for lets encrypt staging
      # caddy.tls: "/data/certs/cert.pem /data/certs/key.pem" ### Optional label for custom certificates
      
      # Default security headers
      caddy.header.Strict-Transport-Security: "`max-age=31536000;`"
      caddy.header.Referrer-Policy: "same-origin"
      caddy.header.X-XSS-Protection: "`1; mode=block`"
      caddy.header.X-Content-Type-Options: "nosniff"
      caddy.header.X-Frame-Options: "SAMEORIGIN"
      caddy.header.Content-Security-Policy: "`
        block-all-mixed-content;
        default-src 'none';
        style-src 'unsafe-inline' 'self';
        script-src 'unsafe-inline' 'unsafe-eval' 'self';
        script-src-elem 'unsafe-inline' 'self' ${SEATABLE_SERVER_HOSTNAME}:${ONLYOFFICE_PORT:-6233} maps.googleapis.com;
        font-src 'self' data:;
        img-src 'self' data: blob: market.seatable.io mt0.google.com maps.googleapis.com maps.gstatic.com;
        form-action 'self' ${SEATABLE_SERVER_HOSTNAME}:${COLLABORA_PORT:-6232};
        connect-src 'self' market.seatable.io https:;
        frame-src 'self' ${SEATABLE_SERVER_HOSTNAME}:${COLLABORA_PORT:-6232} ${SEATABLE_SERVER_HOSTNAME}:${ONLYOFFICE_PORT:-6233};
        frame-ancestors 'self';
        worker-src 'self' blob:;
        manifest-src 'self';
        object-src 'self';
        base-uri 'self'
        `"
      # Allow iframes for some directories
      caddy.route_0: /dtable/view-external-links/*
      caddy.route_0.header.X-Frame-Options: "ALLOWALL"
      caddy.route_0.header.-Content-Security-Policy: ""
      caddy.route_1: /dtable/external-links/*
      caddy.route_1.header.X-Frame-Options: "ALLOWALL"
      caddy.route_1.header.-Content-Security-Policy: ""
      caddy.route_2: /dtable/external-apps/*
      caddy.route_2.header.X-Frame-Options: "ALLOWALL"
      caddy.route_2.header.-Content-Security-Policy: ""
      caddy.route_3: /dtable/forms/*
      caddy.route_3.header.X-Frame-Options: "ALLOWALL"
      caddy.route_3.header.-Content-Security-Policy: ""

    depends_on:
      mariadb:
        condition: service_healthy
      memcached:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - frontend-net
      - backend-seatable-net
    # dtable-web specific healthcheck
    healthcheck:
      test: ["CMD-SHELL", "curl --fail http://localhost:8000 || exit 1"]
      interval: 20s
      retries: 3
      start_period: 20s
      timeout: 10s

  mariadb:
    image: ${SEATABLE_DB_IMAGE:-mariadb:10.11.7-jammy@sha256:3e20b48362476fb535da8b001cfa4d007fe9db0cac915b048711264427627fb8}
    restart: unless-stopped
    container_name: mariadb
    environment:
      - MYSQL_ROOT_PASSWORD=${SEATABLE_MYSQL_ROOT_PASSWORD:?Variable is not set or empty}
      - MYSQL_LOG_CONSOLE=true
      - MARIADB_AUTO_UPGRADE=1
    volumes:
      - "/opt/mariadb:/var/lib/mysql"
    networks:
      - backend-seatable-net
    healthcheck:
      test:
        [
          "CMD",
          "/usr/local/bin/healthcheck.sh",
          "--connect",
          "--mariadbupgrade",
          "--innodb_initialized",
        ]
      interval: 20s
      start_period: 30s
      timeout: 5s
      retries: 3

  # On older database containers without healthcheck users present you might need to create them manually.
  # Check with:
  # mysql -uroot -p -e "SELECT User, Host FROM mysql.user;"
  #
  # Create them with:
  # CREATE USER 'healthcheck'@'127.0.0.1' IDENTIFIED BY '<password>';
  # GRANT USAGE ON *.* TO 'healthcheck'@'127.0.0.1';
  # CREATE USER 'healthcheck'@'::1' IDENTIFIED BY '<password>';
  # GRANT USAGE ON *.* TO 'healthcheck'@'::1';
  # CREATE USER 'healthcheck'@'localhost' IDENTIFIED BY '<password>';
  # GRANT USAGE ON *.* TO 'healthcheck'@'localhost';
  #
  # create and set identical <password> in .healthcheck.cnf in / datadir of the container
  # [mariadb-client]
  # port=3306
  # socket=/run/mysqld/mysqld.sock
  # user=healthcheck
  # password=<password>
  # protocol=tcp


  memcached:
    image: ${SEATABLE_MEMCACHED_IMAGE:-memcached:1.6.26-bookworm@sha256:43c37feca729005b74e7f54ef8bb334d7ffcac750f16be1874ccbad1aab2441c}
    restart: unless-stopped
    container_name: memcached
    entrypoint: memcached -m 256
    networks:
      - backend-seatable-net
    healthcheck:
      test: ["CMD-SHELL", "timeout 2 bash -c '</dev/tcp/localhost/11211'"]
      interval: 20s
      timeout: 5s
      retries: 3

  redis:
    image: ${SEATABLE_REDIS_IMAGE:-redis:7.2.4-bookworm@sha256:3134997edb04277814aa51a4175a588d45eb4299272f8eff2307bbf8b39e4d43}
    restart: unless-stopped
    container_name: redis
    networks:
      - backend-seatable-net
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 20s
      timeout: 5s
      retries: 3

networks:
  frontend-net:
    name: frontend-net
  backend-seatable-net:
    name: backend-seatable-net
